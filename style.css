@import url('https://fonts.googleapis.com/css2?family=DM+Sans:wght@400;700&display=swap');

/**

definições DISPLAY

display: block -- o elemento (box) ocupará toda a largura da página e não importa se há elementos antes ou depois. 
O próximo elemento será jogado para BAIXO, havendo uma quebra de linha.

display: inline -- o elemento (box) ocupará apenas seu próprio tamanho e será posicionado em linha.

**/

/* ========== GERAL ========== */

* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;

    /*     box-sizing: border-box; -- faz com que o tamanho da caixa seja contado a partir da borda / sem o border-box, o tamanho será definido a partir do conteúdo, fazendo com que a caixa, no total, seja maior Ex.: se o tamanho da caixa for 50px, borda 1px e padding 10 px, com o border box, o elemento será 50px no total, fazendo com que o conteúdo tenha seu tamanho reduzido. Sem border-box, na mesma configuração, a caixa terá um tamanho maior que 50px, contando com 1px de borda e 10px de padding, seu tamanho será de 61px.  */
}

:root {
    font-size: 62.5%; /* 1rem = 10px */
    --primary-color: hsl(170, 100%, 26%);
    --headline: hsl(210, 11%, 15%);
    --paragraph: hsl(210, 9%, 31%);
    --brand-beige: hsl(39, 100%, 97%);
    --brand-light: hsl(148, 23%, 89%);
    --nav-height: 7.2rem;
    --bg-light: hsl(180,14%, 97%);
}

html,
body {
    width: 100%;
    height: 100%;
    /* ambos vão pegar 100% do tamanho da página, independente da resolução */
}

html {
    scroll-behavior: smooth;
}

body {
    font-family: 'DM Sans';
    text-align: center;
    font-size: 1.6rem;
    overflow: overlay; /* ultrapassar scroll */
    background-color: var(--bg-light);
}

img {
    max-width: 100%;
}

section {
    padding-block: 10rem;
}

section header h4 {
    font-size: 1.4rem;
    letter-spacing: 0.08;
    text-transform: uppercase;
    color: var(--primary-color);
    margin-bottom: 1.6rem;
}

section .content p {
    font-size: 1.6rem;
    line-height: 150%;
    font-weight: 400;
}

section .content h2 {
        font-size: 3rem;
        line-height: 3.9rem;
        color: var(--headline);    
}


.wrapper {
    /* class para definir largura de layout junto com suas margens horizontais, centralizando todo o conteúdo */
    width: 37.5rem;
    margin-inline: auto; /**margin auto faz com que a página preencha de margem os espaços sobrando automaticamente; nesse caso, fazendo com que o conteúdo fique centralizado //// margin-inline == margin left e right; margin-block == margin bottom e top**/
    padding-inline: 2.4rem;
}

ul {
    list-style: none;
}

/* ========== FIM-GERAL ========== */

/* ========== HEADER ========== */

#home {
    padding-top: calc(
        4.1rem + var(--nav-height)
    ); /* utilizado calc() para somar a margin do header com a altura do nav, fazendo com que o nav não fique sobreposto ao header. 
    
    O intuito da soma é: 
    
    o nav tem um tamanho de 7.2rem, porém, por sua position ser fixed, independente do tamanho, irá sobrer todos os outros elementos da página. Assim, somar o margin-top do header ao tamanho do nav faz com que o espaçamento seja dado.
    */
}

/* ESSE BEFORE ESTÁ ANTES DE TUDO PORQUE, NA PRÁTICA, ELE VEM ANTES DE TUDO MESMO, SENDO FILHO (CHILD) DO HEADER */
#home::before {
    /* criar elemento no html */
    /* before - antes; header::before == antes do header, tem isso... */

    content: ''; /* toda 'tag element' tem que ter um content, um conteúdo */
    width: 100%; /* largura da box - vw é viewport, o que significa que a largura acompanhará o tamanho da viewport */
    height: calc(108rem + var(--nav-height));
    background-color: var(--brand-light);
    display: block; /* display porque todo elemento tem que ter um display pré definido. As tags no html tem display pré-definidos pelo navegador, mas, como estamos criando um elemento html pelo CSS, as pré-definições devem ser feitas manualmente */

    position: absolute; /* sem a position absolute, o elemento  */
    top: 0; /* a posição inicial de cima pra baixo */
    left: 0; /* a posição inicial da esquerda pra direita */
    z-index: -1; /* EIXO Z (profundidade). Todos os elementos são pré-definidos no eixo Z valor 0, onde todos estão no mesmo plano de fundo. Valor negativo '-1' faz com que o elemento fique no plano de trás, e, valor positivo, faz com que o elemento fique à frente. */
}


/* .container {
    background-color: white;
} */

#home h1 {
    font-size: 3.4rem;
    color: var(--headline);
    line-height: 130%;

    margin-bottom: 2.4rem;
}

#home p {
    font-size: 1.8rem;
    color: var(--paragraph);
    margin-bottom: 3.2rem;
}

#home button,
.contacts button {
    background: var(--primary-color);

    border: none;
    border-radius: 4rem;

    margin-bottom: 6rem;

    height: 6.2rem;
    width: 26.3rem;

    color: white;
    font-size: 1.4rem;
    font-weight: 700;
    text-transform: uppercase;

    display: flex; /* o display flex altera o comportamento dos contents-childs / dentro da caixa / deixando um content ao lado do outro*/
    align-items: center; /* permite alinhar os contents dentro da box no EIXO CRUZADO*/
    justify-content: center; /* permite alinhar os contents dentro da box na eixo */
    gap: 1.6rem;
    /* coloca espaço entre os elementos filhos*/

    margin-left: auto;
    margin-right: auto;
}

/* 02 */

#home img {
    width: 26.4rem; /* colocar o tamanho relativo para acompanhar a dimunuição ou aumento da página */
    display: block;
    margin-inline: auto;
    object-position: 0 0.4rem;
    /* mexe na posição do objeto. object-position: X Y; */
}

.stats {
    padding-block: 4rem;
    background-color: var(--brand-beige);
    border: 1px solid var(--brand-light);
    border-radius: 0.6rem;

    display: flex; /* coloca os childs um ao lado do outro */
    flex-direction: column; /* muda os itens de eixo. Row - eixo X; Column - eixo Y */
    justify-content: center; /* alinha os itens no eixo PRINCIPAL / o valor center alinha os itens do centro do eixo */
    gap: 6rem; /* aplica espaçamento entre os content-childs */
}

.stat h3 {
    font-size: 4.8rem;
    color: var(--headline);
    line-height: 130%;
    margin-bottom: 0.4rem;
}

/* ========== FIM-HEADER ========== */

/* ========== NAVIGATION ========== */

nav {
    display: flex;
    height: var(--nav-height);

    position: fixed; /* fixa o elemento, sobrepondo sob todo o resto ///// RESETA TODAS AS CONFIGURAÇÕES */
    top: 0; /* faz com que o elemento comece na posição inicial de cima para baixo */
    width: 100vw;
    z-index: 100; /* posiciona o nav na camada mais pra cima, pois o scrollreveal cobriu o menu */
    
}

nav .wrapper {
    display: flex;
    align-items: center;
    justify-content: space-between; /* preenche automaticamente os espaços, distanciando ao máximo seus elementos. Usado para posicionar elementos nas extremidades do eixo X */
    gap: 1rem; /* espaçamento a mais no nav (logo --- menu) */
}

/* ============= estilo do nav quando a function do JS for executada e a class scroll for add no html ================*/

nav.scroll {
    background-color: var(--primary-color);
}

nav.scroll .logo path {
    fill: white;
}

nav.scroll button path {

    stroke: white;
}

nav button {
    background: none;
    border: none;
    cursor: pointer;
}

/* ========== NAVIGATION ========== */

/* ========== MENU-EXPANDED ========== */

body.menu-expanded {
    /* essa declaração diz: QUANDO o body tiver a class menu-expanded, faça {...} */

    overflow: hidden; /* overflow - sobras da página, gerando scroll Y e X. Hidden faz com que não sobre, não haja rolagem */
}

body.menu-expanded > :not(nav) {
    
    visibility: hidden; /* a visibilidade dos elementos estão apenas escondidos */
    
    
    /* faz com que todos os itens de primeiro nível sumam com display none // o :not (pseudo) é a exceção, então, tudo de primeiro nível, menos o nav, vai sumir 

    display: none;

     a ideia aqui é para melhorar a acessibilidade, onde, quando o usuário der TAB, para pular entre links e buttons, seja navegável apenas os links e buttons do menu-expanded. 
    
    sem esse comando, o usuário, ao dar TAB, vai acabar pulando para outros links que nem está vendo e ficará confuso.
    */
}

.menu,
.close-menu,
body.menu-expanded .open-menu {
    opacity: 0; /* deixa os itens invisiveis, mas se forem links ou buttons, dá para interagir */
    visibility: hidden; /* deixa os itens invisíveis e não dá para interagir ou receber foco*/

    /* apesar de ocultar os itens, o layout ainda é afetado */

    /* deixando os itens principais invisíveis ao abrir o menu */
}

body.menu-expanded .menu,
body.menu-expanded .close-menu {
    opacity: 1;
    visibility: visible;
    /* deixando os itens principais visíveis quando for fechado o menu */
}

.menu {
    transform: translate(100%);
}

body.menu-expanded .menu {
    position: fixed;
    top: 0;
    left: 0;
    background: var(--primary-color);

    width: 100vw; /* pegar toda a largura da tela ---- vw - viewport width */
    height: 100vh; /* pegar toda a altura da tela ---- vh - viewport height */

    padding-top: var(--nav-height);

    transition: transform 300ms;
    transform: translate(0);
}

/* 

Explicação: para efetuar a transição onde o menu vai aparecer aos poucos pela lateral, primeiramente é necessário fazer com
que o menu suma, e isso está sendo feito no .menu.

.menu {
    transform: translate(100%);
}

Explicação: após fazer com que o menu, por padrão, esteja em uma posição fora da página, a gente retorna o menu para a posição original com transform translate(0), porém, suvizamos a transição no  transition com 300ms de demora.

body.menu-expanded .menu {
    position: fixed;
    top: 0;
    left: 0;
    background: var(--primary-color);

    width: 100vw; 
    height: 100vh; 

    padding-top: var(--nav-height);

    transition: transform 300ms;
    transform: translate(0);
}
*/

.menu ul:nth-child(1) {
    /* está pegando o primeiro ul (primeiro filho first child) apenas, pois no .menu tem mais de 1 */
    display: flex; /* modifica o posicionamento dentro da box */
    flex-direction: column; /* altera o eixo direcional da box (aqui foi de X para Y)*/
    gap: 4.8rem; /* espaçamento entre itens */

    margin-top: 6rem;

    font-weight: 700;
    font-size: 2.4rem;
    line-height: 3.1rem;
}

.menu ul li a {
    color: white;
    text-decoration: none;
}

.menu .button {
    background: white;
    border-radius: 4rem;
    font-weight: 700;
    font-size: 1.8rem;
    line-height: 2.3rem;
    text-transform: uppercase;
    text-decoration: none;

    color: var(--primary-color);

    display: inline-block; /* inline já vem por padrão, porém, não é possível alterar margin e/ou largura dessa forma; por isso usar inline-block, pois, além de destravar mais opções, ainda quebra a linha, fazendo com que os itens sobrepostos desçam. */

    /* espaçamentos  */

    padding: 1.6rem 3.2rem;

    margin-top: 4.8rem;
    margin-bottom: 8rem;

    /*  */
}

.social-links {
    display: flex;
    gap: 3.2rem;
    align-items: center;
    justify-content: center;

    /* ajuste de botões */
}

body.menu-expanded .logo,
body.menu-expanded button {
    position: relative;
    z-index: 10;

    /* faz com que o menu apareça --- está colocando ele na camada mais acima do visual, com o z-index (o position relative é para desbloquear o z-index) */
}

body.menu-expanded .logo path {
    /* pega o primeiro FILHO (svg) que encontrar */
    fill: white;
}

body.menu-expanded button path {
    /* pega o segundo FIHLO (svg) que encontrar */
    stroke: white;
}

/* =======================================================
========================================================== */

#services header {
    margin-bottom: 6rem;
}


/* ------------------------- */

#services .cards {
    display: flex;
    flex-direction: column;
    gap: 3.2rem;
}

#services .card {
   /*  width: 32.7rem; */ /* não precisa definir largura/altura porque a div está block, preenchendo todo o espaço disponível */
    text-align: left;
    padding: 2.4rem;
    background-color: white;

    border: 1px solid var(--brand-light);
    border-radius: 0.6rem;
}

#services .card h2 {
    margin-block: 1.6rem;
}


/* ------------------------- */
 #about {
    background-color: var(--brand-beige);
    text-align: left;
}

 #about h2 {
    font-size: 3rem;
    line-height: 3.96rem;
    margin-bottom: 2.4rem;
}
 #about p {
    margin-bottom: 6rem;
}

/* ------------------------- */

.contacts {
    text-align: left;
}

.contacts h2 {
    font-size: 3rem;
    line-height: 3.96rem;
    margin-bottom: 3.2rem;
}

.contact-address,
.contact-email {
    display: flex;
    align-items: center;
    gap: 0.8rem;
}

.contact-email {
    margin-top: 1.6rem;
}

.contacts button {
    margin-top: 6rem;
}


/* ------------------------- */

#footer {
    background-color: var(--primary-color);
    text-align: left;
}

#copy {
    color: hsl(39, 100%, 97%);
}

#copy p:nth-child(1) {
    margin-bottom: 1.2rem;
}

#copy p:nth-child(2) {
    margin-bottom: 3.2rem;
}

.social-links-footer {
    display: flex; gap: 3.2rem;
}